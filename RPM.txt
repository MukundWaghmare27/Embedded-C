
// PIC18F4520 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1H
#pragma config OSC = INTIO67     // Oscillator Selection bits (Internal oscillator block, CLKO function on RA6, port function on RA7)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enable bit (Fail-Safe Clock Monitor disabled)
#pragma config IESO = OFF       // Internal/External Oscillator Switchover bit (Oscillator Switchover mode disabled)

// CONFIG2L
#pragma config PWRT = OFF       // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = SBORDIS  // Brown-out Reset Enable bits (Brown-out Reset enabled in hardware only (SBOREN is disabled))
#pragma config BORV = 3         // Brown Out Reset Voltage bits (Minimum setting)

// CONFIG2H
#pragma config WDT = OFF        // Watchdog Timer Enable bit (WDT disabled (control is placed on the SWDTEN bit))
#pragma config WDTPS = 32768    // Watchdog Timer Postscale Select bits (1:32768)

// CONFIG3H
#pragma config CCP2MX = PORTBE  // CCP2 MUX bit (CCP2 input/output is multiplexed with RB3)
#pragma config PBADEN = OFF     // PORTB A/D Enable bit (PORTB<4:0> pins are configured as digital I/O on Reset)
#pragma config LPT1OSC = OFF    // Low-Power Timer1 Oscillator Enable bit (Timer1 configured for higher power operation)
#pragma config MCLRE = ON       // MCLR Pin Enable bit (MCLR pin enabled; RE3 input pin disabled)

// CONFIG4L
#pragma config STVREN = OFF     // Stack Full/Underflow Reset Enable bit (Stack full/underflow will not cause Reset)
#pragma config LVP = OFF        // Single-Supply ICSP Enable bit (Single-Supply ICSP disabled)
#pragma config XINST = OFF      // Extended Instruction Set Enable bit (Instruction set extension and Indexed Addressing mode disabled (Legacy mode))

// CONFIG5L
#pragma config CP0 = OFF        // Code Protection bit (Block 0 (000800-001FFFh) not code-protected)
#pragma config CP1 = OFF        // Code Protection bit (Block 1 (002000-003FFFh) not code-protected)
#pragma config CP2 = OFF        // Code Protection bit (Block 2 (004000-005FFFh) not code-protected)
#pragma config CP3 = OFF        // Code Protection bit (Block 3 (006000-007FFFh) not code-protected)

// CONFIG5H
#pragma config CPB = OFF        // Boot Block Code Protection bit (Boot block (000000-0007FFh) not code-protected)
#pragma config CPD = OFF        // Data EEPROM Code Protection bit (Data EEPROM not code-protected)

// CONFIG6L
#pragma config WRT0 = OFF       // Write Protection bit (Block 0 (000800-001FFFh) not write-protected)
#pragma config WRT1 = OFF       // Write Protection bit (Block 1 (002000-003FFFh) not write-protected)
#pragma config WRT2 = OFF       // Write Protection bit (Block 2 (004000-005FFFh) not write-protected)
#pragma config WRT3 = OFF       // Write Protection bit (Block 3 (006000-007FFFh) not write-protected)

// CONFIG6H
#pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers (300000-3000FFh) not write-protected)
#pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot block (000000-0007FFh) not write-protected)
#pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM not write-protected)

// CONFIG7L
#pragma config EBTR0 = OFF      // Table Read Protection bit (Block 0 (000800-001FFFh) not protected from table reads executed in other blocks)
#pragma config EBTR1 = OFF      // Table Read Protection bit (Block 1 (002000-003FFFh) not protected from table reads executed in other blocks)
#pragma config EBTR2 = OFF      // Table Read Protection bit (Block 2 (004000-005FFFh) not protected from table reads executed in other blocks)
#pragma config EBTR3 = OFF      // Table Read Protection bit (Block 3 (006000-007FFFh) not protected from table reads executed in other blocks)

// CONFIG7H
#pragma config EBTRB = OFF      // Boot Block Table Read Protection bit (Boot block (000000-0007FFh) not protected from table reads executed in other blocks)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#include<stdio.h>
#include<pic18.h>
#define _XTAL_FREQ 40000000

void lcd_init(void);
void lcd_data(char data);
void lcd_cmd(char cmd);
void lcd_prnt(char *str);

int data1,data2,count;
float period,freq;
char msg[16];
char msg2[16];
float rpm=0;



void main()
{
    OSCCON=0x72;
    TRISBbits.TRISB3=1;
    TRISD=0x00; // TO Declare Port D as Output
    //TRISB=0x00; // To DEclare i/o ports of PORT B
    TRISC=0x08;
    T1CON=0X80;
    CCP2CON=0X05;
    TMR1=0;
    CCPR2=0;
   
    
    PIR2bits.CCP2IF=0;
    PIE2bits.CCP2IE=0;
    lcd_init();
    lcd_prnt("DFM");
 
    T1CONbits.TMR1ON=1;
     
            
            while(1)
            {
                while(PIR2bits.CCP2IF==0);
                //lcd_prnt("1");
                //__delay_ms(1000);
                PIR2bits.CCP2IF=0;
                data1=(int)CCPR2;
                
                while(PIR2bits.CCP2IF==0);
                PIR2bits.CCP2IF=0;
                data2=(int)CCPR2;

                    
                if(data1<data2)
                    {
                        count=data2-data1;
                        period=(float)count*0.0000005;
                        freq=1/period;
                        lcd_cmd(0x85);
                        sprintf(msg,"%.2f",freq);
                        lcd_prnt(msg);
                        lcd_prnt("hz");
                        
                        rpm=freq*60;
                        sprintf(msg2,"%.1f",rpm);
                        lcd_cmd(0xc9);
                        lcd_prnt("rpm");
                        lcd_cmd(0xc0);
                        lcd_prnt(msg2);
                        
                    }
                
            }
    return;

     
                
          
}
void lcd_init(void)
{
   lcd_cmd(0x38);
   lcd_cmd(0x0C);
   lcd_cmd(0x06);
   lcd_cmd(0x01);
   lcd_cmd(0x80);
}
void lcd_cmd(char cmd)
{
    LATD=cmd;
    LATCbits.LC1 = 0;
    LATCbits.LC0 = 0;
    LATCbits.LC2 = 1;
    __delay_ms(1);
    LATCbits.LC2 = 0;  
}
void lcd_data(char data)
{
   LATD=data;
   LATCbits.LC0 = 0;
   LATCbits.LC1 = 1;
   LATCbits.LC2 = 1;
   __delay_ms(1);
   LATCbits.LC2 = 0;
}

void lcd_prnt(char *str)
{   while(*str != '\0')
    {
        lcd_data(*str);
        str++;
    }


}
